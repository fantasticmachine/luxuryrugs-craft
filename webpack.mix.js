let mix = require('laravel-mix');

const imageminMozjpeg = require('imagemin-mozjpeg');
require('laravel-mix-imagemin');

let srcPath = 'src';
let buildPath = 'build/public';

mix
	.setPublicPath(buildPath)
	.options({
		processCssUrls: false
 	})
 	.sourceMaps(true,'source-map')
	.sass(srcPath + '/scss/style.scss',  buildPath + '/css/')
	.js(srcPath + '/js/app.js', buildPath + '/js/')
	.version()
	.copyDirectory(srcPath + '/fonts',  buildPath + '/fonts/')
	.setPublicPath(buildPath);

if (mix.inProduction()) {
	mix
		.minify([
			buildPath + '/css/style.css',
			buildPath + '/js/app.js'
		])
		.imagemin(
			'images/**/*.*',
			{
				to: buildPath,
				context: srcPath
			},
			{
				plugins: [imageminMozjpeg({
					quality: 80,
				})]
			}
		);
} else {
	//mix
	//	.copyDirectory(srcPath + '/images',  buildPath + '/images');
}


mix.webpackConfig({
	module: {
		rules: [
			{
				test: /\.scss/,
				loader: 'import-glob-loader'
			}
		]
	},
	plugins: []
});

// If using jQuery then uncomment this to make it available wherever encountered within Webpacks's generated JS
// This means you can use things like Parsley JS within your main app.js (or a module)
/*
mix.autoload({
	jquery: ['$', 'window.jQuery']
});
*/



// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
